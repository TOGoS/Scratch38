#+TITLE: Scratch38.1 Block File Format

A relatively efficient format for storing Minecraft map data
(i.e. spans of 4kb blocks).

** Original notes

From [[http://wherever-files.nuke24.net/uri-res/raw/urn:bitprint:KCABIKZALTFCIWSCJTVBTCNRI7FRYXLT.N7JPWPAAU43Q2ZWWVJLKFPNN7EOUZ3YG3MTYS3Y/S38S1-original-README.org][S0001/README.org]], last modified 2023-0905T13:34.
Not sure why this was separate;
maybe just started on a different computer before I
made this Git repo for it.

#+begin_quote
#+TITLE: urn:oid:1.3.6.1.4.1.44868.261.38.1

File format for relatively efficient storing
of Minecraft map data (i.e. spans of 4kb blocks)

Initial thoughts:
- By default 'just a bunch of raw data, which you're more likely
  to make sense of if it's chunked into 4kiB pieces'
- Files must always be a multiple of 4kiB in length
- Files can be concatenated together, and the result is
  equivalent to the two original files
  - Implication: No by-absolute-offset referencess between
    chunks within the file
- Blocks with a special pattern at the beginning of the 4kiB
  can have special meaning, useful for providing chunks
  of data that aren't simply 4kiB chunks of arbitrary data,
  for example:
  - a bunch of tigertree nodes
  - [[http://www.nuke24.net/docs/2003/draft-jchapweske-thex-02.html][THEX data]]
  - Properties file-style dictionary
#+end_quote

** Basic idea

Length-prefixed blocks which *happen* to be on 4kiB boundaries most of the time.
When not storing 4kiB chunks, feel free to use anything else, on the condition that
(a) file is always a multiple of 4 kiB long,
(b) the first block in the file starts on a 4 kiB boundary.

This way, one of these files can always be processed by skipping
through 4kiB at a time until a block header is found.
After that, arbitrarily-sized blocks can be processed in order.

** Other possibilities

Note that this could all be accomplished with something like
https://en.wikipedia.org/wiki/Resource_Interchange_File_Format,
using padding chunks to line things up.

Even better would be if an existing container format,
such as zip, allows splitting data into chunks.
Then these block files could be readable by any old Joe,
and thereby useful for much more than just special-purpose
block storage.

*** Zip

Q: Can I just ~cat some stuff zip-file.zip~ and have a valid zip file?

A: According to ~zip~ on my Linux computer, yes.
Though it may complain a little bit about junk at the beginning of the file.

Q: Can I just ~cat some stuff jar-file.jar~ and Java will still accept and run it?

A: According to that same Linux machine, yes.
   And according to OpenJDK 11.0.14.1 and Semuru Java 17.0.5.0, also yes.

** S38.1:BLOCK Format

Any number of 4 kiB chunks that do not start with "#S38.1:BLOCK" are ignored.
This way arbitrary file formats (e.g. a RIFF file or a PNG or whatever)
can be combined with S38.1 block files.

Once a block appears in a stream, other alignment can be used, e.g. 1kiB,
or none at all.  To stay on 'nice fixed sized chunk' boundaries,
top-level blocks must have lengths that are multiples of that chunk size, e.g. 4kiB
(this is why block size is independent of payload offset/length).

#+BEGIN_SRC
block = block-header + block-metadata + payload + trailing-garbage

block-header = "#S38.1:BLOCK:" + block-length

block-metadata = metadata-header* + newline

metadata-header = line-comment | metadata-header-key + ": " + metadata-header-value + newline

line-comment = "#" + "#*" + newline
             | "#" + "#"* + " " + anything other than newline + newline

trailing-garbage = any bytes from the end of the payload to the end of the block
#+END_SRC

Notes:
- Numbers are decimal-encoded.
- The payload starts after the first blank line
- "#" followed by anything other than space, newline, or exclamation point is reserved
- ~content-length~ header indicates the length of the payload
  (todo: for least surprise, this should be similar to HTTP semantics;
  is this the length before or after decoding according to content-encoding?)

Example:

#+BEGIN_SRC
#S38.1:BLOCK:16384
content-type: application/x-chunks:1234
# x-chunks:<size> being a hypothetical format that is simply
# a series of chunks of the given length.
content-length: 12340
# Any padding that's convenient could go here

(pretend ten 1234-byte chunks of data are here, followed by some zeroes or garbage or something)
#+END_SRC
